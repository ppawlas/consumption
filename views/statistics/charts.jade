extends ../layout

block content
	div(class='page-header')
		h1= title

	script(src='/javascripts/jquery-ui-1.10.3.custom.min.js')
	script(src='/javascripts/d3.min.js')
	script(src='/javascripts/d3.tip.v0.6.3.js')

	div(id='chart')
	div(id='slider')

	script.
		$(document).ready(function() {

			var getDate = function(date) {
				var month = date.getMonth() + 1;
				return date.getFullYear() + '-' + (month < 10 ? '0' + month : month) ;
			};

			var round = function(number, precision) {
				precision = typeof precision !== 'undefined' ? precision : 2;

				return number ? parseFloat(Math.round(number * 100) / 100).toFixed(precision) : null;
			};			

			function prepare(json) {
				function nullify(usage) {
					return usage ? usage : null;
				}
				var data = [];

				json.periods.reverse().forEach(function(period) {
					obj = {}
					obj.date = parseDate(period);
					obj.gas = nullify(json.data[period].gas);
					obj.electricity = nullify(json.data[period].electricity);
					obj.water = nullify(json.data[period].water);
					data.push(obj);
				});

				return data;
			};

			var namesDict = {
				'electricity': 'EE / Dzień',
				'gas': 'Gaz / Dzień',
				'water': 'Woda / Tydzień'
			};

			var margin = {top: 20, right: 60, bottom: 30, left: 50},
			width = 1000 - margin.left - margin.right,
			height = 500 - margin.top - margin.bottom;

			var parseDate = d3.time.format('%Y-%m').parse;

			var x = d3.time.scale()
					.range([0, width - 40]);

			var y = d3.scale.linear()
					.range([height - 10 , 10]);

			var color = d3.scale.ordinal()
				.range(["#34495e", "#f39c12", "#2980b9"]);

			var xAxis = d3.svg.axis()
					.scale(x)
					.orient('bottom')
					.ticks(7);

			var yAxis = d3.svg.axis()
					.scale(y)
					.orient('left')
					.ticks(10);

			var tip = d3.tip()
				.attr('class', 'd3-tip')
				.offset([-10, 0])
				.html(function(d) {
					console.log(d);
					return "<strong>" + getDate(d.date) + " : </strong> <span style='color:#e74c3c'>" + round(d.usage) + "</span>";
				});

			var line = d3.svg.line()
				.x(function(d) { return x(d.date); })
				.y(function(d) { return y(d.usage); });	
				
			var svg = d3.select('#chart').append('svg')
					.attr('width', width + margin.left + margin.right)
					.attr('height', height + margin.top + margin.bottom)
				.append('g')
					.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

			svg.call(tip);				

			var clip = svg.append('defs').append('svg:clipPath')
					.attr('id', 'clip')
					.append('svg:rect')
					.attr('id', 'clip-rect')
					.attr('x', '0')
					.attr('y', '0')
					.attr('width', width)
					.attr('height', height);

			// from and to are timestamps .getTime()
			d3.json('/statistics/json', function(err, json) {
				if (err) {
					console.warn(err);
				}
				var data = prepare(json);

				$( '#slider' ).slider({
					range: true,
					min: 0,
					max: data.length - 1,
					values: [0, data.length - 1],
					slide: function(event, ui) {
						console.log(ui);
						var sliderMax = d3.min([data[ui.values[1]].date, data[data.length - 1].date]);
						var sliderMin = d3.max([data[ui.values[0]].date, data[0].date]);

						if (sliderMax === sliderMin) {
							return false;	
						}
						var delay = 500;

						x.domain([sliderMin, sliderMax - 1]);
						svg.transition().duration(delay)
							.select('.x.axis').call(xAxis);
						svg.transition().duration(delay)
							.selectAll('.line').attr('d', function(d) { return line(d.values); })
						svg.transition().duration(delay)
							.selectAll('circle')
							.attr('cx', function(d) { return x(d.date); })
							.attr('cy', function(d) { return y(d.usage); })
						svg.transition().duration(delay)
							.selectAll('text.electricity')
							.attr('transform', function(d) { return 'translate(' + x(data[ui.values[1]].date) + ',' + y(data[ui.values[1]].electricity) + ')'; })
						svg.transition().duration(delay)								
							.selectAll('text.water')
							.attr('transform', function(d) { return 'translate(' + x(data[ui.values[1]].date) + ',' + y(data[ui.values[1]].water) + ')'; })
						svg.transition().duration(delay)								
							.selectAll('text.gas')
							.attr('transform', function(d) { return 'translate(' + x(data[ui.values[1]].date) + ',' + y(data[ui.values[1]].gas) + ')'; })
					}
				});				

				color.domain(d3.keys(data[0]).filter(function(key) { return key !== 'date'; }));

				var readings = color.domain().map(function(name) {
					return {
						name: name,
						values: data.map(function(d) {
							return {date: d.date, usage: +d[name]};
						})
					};
				});				

				x.domain(d3.extent(data, function(d) { return d.date; }));
				y.domain([
					d3.min(readings, function(c) { return d3.min(c.values, function(v) { return v.usage; }); }),
					d3.max(readings, function(c) { return d3.max(c.values, function(v) { return v.usage; }); })
				]);	

				svg.append('g')
						.attr('class', 'x axis')
						.attr('transform', 'translate(0,' + height + ')')
						.call(xAxis.tickSize(-height, 0, 0));

				svg.append('g')
						.attr('class', 'y axis')
						.call(yAxis.tickSize(-width, 0, 0))
					.append('text')
						.attr('transform', 'rotate(-90)')
						.attr('y', 6)
						.attr('dy', '.71em')
						.style('text-anchor', 'end')
						.text('Zużycie');

				var reading = svg.selectAll('.reading')
							.data(readings)
					.enter().append('g')
							.attr('class', 'reading');						

				reading.append('path')
					.attr('class', 'line')
					.attr('clip-path', 'url(#clip)')
					.attr('d', function(d) { return line(d.values); })
					.style('stroke', function(d) { return color(d.name); });		

				reading.append('text')
						.datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
						.attr('class', function(d) { return d.name; })
						.attr('transform', function(d) { return 'translate(' + x(d.value.date) + ',' + y(d.value.usage) + ')'; })
						.attr('x', 3)
						.attr('dy', '-.55em')
						.style('font-size', '14px')
						.text(function(d) { return namesDict[d.name]; });

				var points = svg.selectAll('.points')
							.data(readings)
					.enter().append('g')
							.attr('class', function(d) { return 'points ' + d.name });

				var point = points.selectAll('.point')
							.data(function(d) { return d.values; })
					.enter().append('circle')				
							.attr('clip-path', 'url(#clip)')			
							.attr('cx', function(d) { return x(d.date); })
							.attr('cy', function(d) { return y(d.usage); })
							.attr('r', 3)
							.style('stroke', function(d) { return color(d3.select(this.parentNode).datum().name); })
							.style('stroke-width', 2)
							.style('fill', function(d) { return 'white'; })
							.on('mouseover', function(d) {
								tip.show(d);
								d3.select(this).transition().attr('r', 6).duration(500);
							})
							.on('mouseout', function(d) {
								tip.hide(d);
								d3.select(this).transition().attr('r', 3).duration(500);							
							});

			});
		});