extends ../layout

block content
	h1= title

	script(src='/javascripts/jquery-2.0.3.min.js')	
	script(src='/javascripts/d3.min.js')		
	script.
		$(document).ready(function() {
			function prepare(json) {
				function nullify(usage) {
					return usage ? usage : null;
				}
				var data = [];

				json.periods.forEach(function(period) {
					obj = {}
					obj.date = parseDate(period);
					obj.gas = nullify(json.data[period].gas);
					obj.electricity = nullify(json.data[period].electricity);
					obj.water = nullify(json.data[period].water);
					data.push(obj);
				});

				return data;
			}

			var margin = {top: 20, right: 20, bottom: 30, left: 50},
			width = 1000 - margin.left - margin.right,
			height = 500 - margin.top - margin.bottom;

			var parseDate = d3.time.format('%Y-%m').parse;

			var x = d3.time.scale()
					.range([0, width - 40]);

			var y = d3.scale.linear()
					.range([height, 0]);

			var color = d3.scale.category10();					

			var xAxis = d3.svg.axis()
					.scale(x)
					.orient('bottom');

			var yAxis = d3.svg.axis()
					.scale(y)
					.orient('left');		

			var line = d3.svg.line()
				.x(function(d) { return x(d.date); })
				.y(function(d) { return y(d.usage); });	
				
			var svg = d3.select('body').append('svg')
					.attr('width', width + margin.left + margin.right)
					.attr('height', height + margin.top + margin.bottom)
				.append('g')
					.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');						

			// from and to are timestamps .getTime()
			d3.json('/statistics/json?from=1325372400000&to=1356908400000', function(err, json) {
				if (err) {
					console.warn(err);
				}
				var data = prepare(json);

				color.domain(d3.keys(data[0]).filter(function(key) { return key !== 'date'; }));

				var readings = color.domain().map(function(name) {
					return {
						name: name,
						values: data.map(function(d) {
							return {date: d.date, usage: +d[name]};
						})
					};
				});				

				x.domain(d3.extent(data, function(d) { return d.date; }));
				y.domain([
					d3.min(readings, function(c) { return d3.min(c.values, function(v) { return v.usage; }); }),
					d3.max(readings, function(c) { return d3.max(c.values, function(v) { return v.usage; }); })
				]);	

				svg.append('g')
						.attr('class', 'x axis')
						.attr('transform', 'translate(0,' + height + ')')
						.call(xAxis);

				svg.append('g')
						.attr('class', 'y axis')
						.call(yAxis)
					.append('text')
						.attr('transform', 'rotate(-90)')
						.attr('y', 6)
						.attr('dy', '.71em')
						.style('text-anchor', 'end')
						.text('Usage');

				var reading = svg.selectAll(".reading")
							.data(readings)
					.enter().append("g")
							.attr("class", "reading");						

				reading.append("path")
					.attr("class", "line")
					.attr("d", function(d) { return line(d.values); })
					.style("stroke", function(d) { return color(d.name); });

				reading.append("text")
						.datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
						.attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.usage) + ")"; })
						.attr("x", 3)
						.attr("dy", ".35em")
						.text(function(d) { return d.name; });
			});
		});